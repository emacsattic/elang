https://api.travis-ci.org/vkazanov/elang.svg

A simple Python-like language for the Emacs VM

* What is Elang?

  Elang is a Frankenstein's monster, created using a ported Python tokenizer, a
  Python subset parser and a compiler which emits Emacs VM byte-code.

* Who needs such a beast?

  Good question. Practically? Nobody. I really think Emacs Lisp is totally fine
  for Emacs (apart from the little annoyances we've all just learned to love).
  This is something I created just to see if Emacs VM can be a target for a
  language different from Lisps.

  And it turns out it can..!

* How does it work?

  What do you think? It tokenizes the code, parses the token stream, then
  compiles the parse tree to a byte-compiled Emacs function and executes the
  latter.

  To load a complete file it just parses the file, finding ~def~'s and
  global assignments, loading the functions and setting global variables.

  Note that global assignments currently do not evaluate it's values.

* How to play with it?

  Install the ~names~ package.

  Clone the repository, add the resulting directory to your ~load-path~ and do
  ~(require 'elang)~.

  Then open one of the example files in the ~examples/~ directory and do, say,
  ~(elang-eval-current-defun)~ while having the point somewhere within one of
  the test functions there.

  The function should become available through ~M-:~ or any other means of running Emacs Lisp functions.

* Gotchas

Actually, only the most basic things currently work, i.e. expressions and
funcalls. Things to remember additionally:

  1. This is not Python. This is not even a port of the language. Technically this
     is Emacs Lisp using basic Python syntax ideas.

  2. The language uses dynamic binding.

  3. The language does not interoperate with Emacs Lisp in a nice way, i.e.
     there's no was to deal with symbols, or declare an interactive function.

  4. No list or map-related syntax.

Check the ~examples/~ directory for code that should work now.
