except_clause ==>	 ["'except'"]
small_stmt ==>	 ['STRING', "'not'", 'NUMBER', "'{'", "'lambda'", "'print'", "'`'", "'return'", "'assert'", 'NAME', "'del'", "'pass'", "'-'", "'['", "'('", "'break'", "'continue'", "'+'"]
argument ==>	 ['NAME', "'not'", "'-'", 'NUMBER', "'{'", "'('", "'lambda'", "'['", "'`'", "'+'", 'STRING']
fplist ==>	 ["'('", 'NAME']
return_stmt ==>	 ["'return'"]
not_test ==>	 ['NAME', "'not'", "'-'", 'NUMBER', "'{'", "'('", "'['", "'`'", "'+'", 'STRING']
arglist ==>	 ['NAME', "'**'", "'not'", "'-'", 'NUMBER', "'{'", "'('", "'lambda'", "'*'", "'['", "'`'", "'+'", 'STRING']
break_stmt ==>	 ["'break'"]
dictmaker ==>	 ['NAME', "'not'", "'-'", 'NUMBER', "'{'", "'('", "'lambda'", "'['", "'`'", "'+'", 'STRING']
comp_op ==>	 ["'!='", "'>'", "'=='", "'<>'", "'in'", "'<='", "'is'", "'>='", "'<'"]
parameters ==>	 ["'('"]
continue_stmt ==>	 ["'continue'"]
fpdef ==>	 ["'('", 'NAME']
single_input ==>	 ["'def'", 'STRING', "'not'", 'NUMBER', "'{'", "'lambda'", "'print'", "'`'", "'while'", "'return'", "'assert'", 'NAME', "'del'", "'pass'", 'NEWLINE', "'-'", "'['", "'for'", "'('", "'if'", "'break'", "'continue'", "'+'"]
print_stmt ==>	 ["'print'"]
factor ==>	 ['NAME', "'-'", 'NUMBER', "'{'", "'('", "'['", "'`'", "'+'", 'STRING']
test ==>	 ['NAME', "'not'", "'-'", 'NUMBER', "'{'", "'('", "'lambda'", "'['", "'`'", "'+'", 'STRING']
suite ==>	 ['STRING', "'not'", 'NUMBER', "'{'", "'lambda'", "'print'", "'`'", "'return'", "'assert'", 'NAME', "'del'", "'pass'", 'NEWLINE', "'-'", "'['", "'('", "'break'", "'continue'", "'+'"]
compound_stmt ==>	 ["'for'", "'while'", "'def'", "'if'"]
flow_stmt ==>	 ["'break'", "'continue'", "'return'"]
power ==>	 ["'{'", "'('", 'NAME', "'`'", 'NUMBER', "'['", 'STRING']
simple_stmt ==>	 ['STRING', "'not'", 'NUMBER', "'{'", "'lambda'", "'print'", "'`'", "'return'", "'assert'", 'NAME', "'del'", "'pass'", "'-'", "'['", "'('", "'break'", "'continue'", "'+'"]
testlist ==>	 ['NAME', "'not'", "'-'", 'NUMBER', "'{'", "'('", "'lambda'", "'['", "'`'", "'+'", 'STRING']
and_test ==>	 ['NAME', "'not'", "'-'", 'NUMBER', "'{'", "'('", "'['", "'`'", "'+'", 'STRING']
assert_stmt ==>	 ["'assert'"]
for_stmt ==>	 ["'for'"]
stmt ==>	 ["'def'", 'STRING', "'not'", 'NUMBER', "'{'", "'lambda'", "'print'", "'`'", "'while'", "'return'", "'assert'", 'NAME', "'del'", "'pass'", "'-'", "'['", "'for'", "'('", "'if'", "'break'", "'continue'", "'+'"]
lambdef ==>	 ["'lambda'"]
atom ==>	 ['NAME', 'NUMBER', "'['", "'('", "'{'", "'`'", 'STRING']
funcdef ==>	 ["'def'"]
expr_stmt ==>	 ['NAME', "'not'", "'-'", 'NUMBER', "'{'", "'('", "'lambda'", "'['", "'`'", "'+'", 'STRING']
exprlist ==>	 ['NAME', "'-'", 'NUMBER', "'{'", "'('", "'['", "'`'", "'+'", 'STRING']
pass_stmt ==>	 ["'pass'"]
comparison ==>	 ['NAME', "'-'", 'NUMBER', "'{'", "'('", "'['", "'`'", "'+'", 'STRING']
term ==>	 ['NAME', "'-'", 'NUMBER', "'{'", "'('", "'['", "'`'", "'+'", 'STRING']
if_stmt ==>	 ["'if'"]
arith_expr ==>	 ['NAME', "'-'", 'NUMBER', "'{'", "'('", "'['", "'`'", "'+'", 'STRING']
expr ==>	 ['NAME', "'-'", 'NUMBER', "'{'", "'('", "'['", "'`'", "'+'", 'STRING']
del_stmt ==>	 ["'del'"]
while_stmt ==>	 ["'while'"]
varargslist ==>	 ["'*'", "'('", 'NAME', "'**'"]
file_input ==>	 ['ENDMARKER', 'STRING', "'not'", 'NUMBER', "'def'", "'{'", "'print'", "'`'", "'while'", "'return'", "'assert'", 'NAME', "'del'", "'pass'", 'NEWLINE', "'-'", "'['", "'for'", "'('", "'if'", "'break'", "'continue'", "'+'", "'lambda'"]
trailer ==>	 ["'('", "'['"]
