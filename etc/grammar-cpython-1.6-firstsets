small_stmt ==>	 ["'return'", "'assert'", 'STRING', "'not'", "'pass'", "'-'", 'NUMBER', "'global'", "'('", "'break'", "'continue'", "'+'", 'NAME']
return_stmt ==>	 ["'return'"]
not_test ==>	 ["'('", 'STRING', "'not'", "'-'", 'NUMBER', "'+'", 'NAME']
flow_stmt ==>	 ["'break'", "'continue'", "'return'"]
comp_op ==>	 ["'!='", "'>'", "'<>'", "'=='", "'<='", "'>='", "'<'"]
parameters ==>	 ["'('"]
single_input ==>	 ["'return'", "'assert'", 'STRING', "'if'", "'not'", "'pass'", 'NEWLINE', "'-'", 'NUMBER', "'def'", "'global'", "'('", "'while'", "'break'", "'continue'", "'+'", 'NAME']
factor ==>	 ['STRING', "'-'", 'NUMBER', "'('", "'+'", 'NAME']
test ==>	 ["'('", 'STRING', "'not'", "'-'", 'NUMBER', "'+'", 'NAME']
global_stmt ==>	 ["'global'"]
compound_stmt ==>	 ["'while'", "'def'", "'if'"]
power ==>	 ["'('", 'NAME', 'NUMBER', 'STRING']
simple_stmt ==>	 ["'return'", "'assert'", 'STRING', "'not'", "'pass'", "'-'", 'NUMBER', "'global'", "'('", "'break'", "'continue'", "'+'", 'NAME']
testlist ==>	 ["'('", 'STRING', "'not'", "'-'", 'NUMBER', "'+'", 'NAME']
and_test ==>	 ["'('", 'STRING', "'not'", "'-'", 'NUMBER', "'+'", 'NAME']
assert_stmt ==>	 ["'assert'"]
stmt ==>	 ["'return'", "'assert'", 'STRING', "'if'", "'not'", "'pass'", "'-'", 'NUMBER', "'def'", "'global'", "'('", "'while'", "'break'", "'continue'", "'+'", 'NAME']
atom ==>	 ['NUMBER', "'('", 'STRING', 'NAME']
funcdef ==>	 ["'def'"]
expr_stmt ==>	 ["'('", 'STRING', "'not'", "'-'", 'NUMBER', "'+'", 'NAME']
exprlist ==>	 ["'('", 'STRING', "'-'", 'NUMBER', "'+'", 'NAME']
comparison ==>	 ["'('", 'STRING', "'-'", 'NUMBER', "'+'", 'NAME']
term ==>	 ["'('", 'STRING', "'-'", 'NUMBER', "'+'", 'NAME']
if_stmt ==>	 ["'if'"]
expr ==>	 ["'('", 'STRING', "'-'", 'NUMBER', "'+'", 'NAME']
while_stmt ==>	 ["'while'"]
varargslist ==>	 ['NAME']
suite ==>	 ["'return'", "'assert'", 'STRING', "'not'", "'pass'", 'NEWLINE', "'-'", 'NUMBER', "'global'", "'('", "'break'", "'continue'", "'+'", 'NAME']
file_input ==>	 ['ENDMARKER', 'STRING', "'not'", 'NUMBER', "'def'", "'while'", "'return'", "'assert'", 'NAME', "'pass'", 'NEWLINE', "'-'", "'global'", "'('", "'if'", "'break'", "'continue'", "'+'"]
trailer ==>	 ["'('"]
